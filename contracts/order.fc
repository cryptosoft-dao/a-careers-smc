#include "imports/stdlib.fc";
#include "constants/constants.fc";
#include "constants/op-codes.fc";
#include "constants/errors.fc";

global int storage::init?;
global int storage::index;
global int storage::status;
global slice storage::master_address;
global slice storage::customer_address;
global slice storage::freelancer_address;
global cell storage::content;
global cell storage::responses;

{-
_ index:uint64 master_address:MsgAddressInt customer_address:MsgAddressInt freelancer_address:MsgAddress
  content:(HashmapE 256 ^Cell) responses:(HashmapE 256 ^Cell) status:uint8 = OrderStorage;
-}

() load_data() impure {
    slice ds = get_data().begin_parse();

    storage::index = ds~load_uint(64);
    storage::master_address = ds~load_msg_addr();

    if(slice_bits(ds) > 0) {
        storage::init? = true;
        storage::customer_address = ds~load_msg_addr();
        storage::freelancer_address = ds~load_msg_addr();
        storage::content = ds~load_dict();
        storage::responses = ds~load_dict();
        storage::status = ds~load_uint(8);
    } else {
        storage::init? = false;
    }
}

() save_data() impure {
    set_data(begin_cell()
        .store_uint(storage::index, 64)
        .store_slice(storage::master_address)
        .store_slice(storage::customer_address)
        .store_slice(storage::master_address)
        .store_dict(storage::content)
        .store_dict(storage::responses)
        .store_uint(storage::status, 8)
        .end_cell()
    );
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = in_msg_full~load_uint(4);
    slice sender_address = in_msg_full~load_msg_addr();
    ;; support bounce?

    load_data();
    if (storage::init?) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::master_address));
        storage::customer_address = in_msg_body~load_msg_addr();
        storage::freelancer_address = addr_none;
        storage::content = in_msg_body~load_dict();
        storage::responses = null();
        storage::status = status::moderation;

        save_data();
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::activate_order) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::master_address));
        throw_unless(error::invalid_status, storage::status == status::moderation);
        storage::status = status::active;
        save_data();
        return ();
    }

    if (op == op::add_response) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::master_address));
        throw_unless(error::invalid_status, storage::status == status::active);

        ;; TODO: Implement

        return ();
    }

    if (op == op::assign_user) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::customer_address));
        throw_unless(error::invalid_status, storage::status == status::active);
        storage::status = status::in_proggess;
        storage::freelancer_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    if (op == op::complete_order) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::freelancer_address));
        throw_unless(error::invalid_status, storage::status == status::in_proggess);
        storage::status = status::fulfilled;
        save_data();
        return ();
    }

    if (op == op::customer_feedback) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::customer_address));
        throw_unless(error::invalid_status, storage::status == status::fulfilled);

        ;; TODO: Implement

        return ();
    }

    if (op == op::process_arbitration) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::master_address));
        throw_unless(error::invalid_status, storage::status == status::on_arbitration);

        ;; TODO: Implement. From admins

        return ();
    }
}
