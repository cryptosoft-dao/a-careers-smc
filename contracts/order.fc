#include "imports/stdlib.fc";
#include "constants/constants.fc";
#include "constants/op-codes.fc";
#include "constants/errors.fc";
#include "constants/fees.fc";
#include "logic/messages.fc";

global int storage::init?;
global int storage::index;
global int storage::status;
global int storage::price;
global int storage::deadline;
global int storage::time_for_check;
global int storage::protocol_fee_numerator;
global int storage::protocol_fee_denominator;
global int storage::admin_count;
global slice storage::master_address;
global slice storage::customer_address;
global slice storage::freelancer_address;
global cell storage::content;
global cell storage::responses;
global int storage::responses_count;
global int storage::completed_at;
global int storage::admin_count_for_active;

global int storage::admin_voted_count;
global int storage::freelancer_part;
global int storage::customer_part;
global int storage::admin_count;
global int storage::agreement_perc;

{-
_ index:uint64 master_address:MsgAddressInt customer_address:MsgAddressInt freelancer_address:MsgAddress
  content:(HashmapE 256 ^Cell) responses:(HashmapE 256 ^Cell) status:uint8 = OrderStorage;
-}

() load_data() impure {
    slice ds = get_data().begin_parse();

    storage::index = ds~load_uint(64);
    storage::master_address = ds~load_msg_addr();

    if(slice_bits(ds) > 0) {
        storage::init? = true;
        slice addresses = ds~load_ref().begin_parse();
        storage::customer_address = addresses~load_msg_addr();
        storage::freelancer_address = addresses~load_msg_addr();
        storage::content = ds~load_dict();
        storage::price = ds~load_coins();
        storage::deadline = ds~load_uint(32);
        storage::time_for_check = ds~load_uint(32);
        storage::protocol_fee_numerator = ds~load_uint(8);
        storage::protocol_fee_denominator = ds~load_uint(8);
        storage::responses = ds~load_dict();
        storage::status = ds~load_uint(8);
        storage::admin_count = ds~load_uint(64);
        storage::responses_count = ds~load_uint(8);
        storage::completed_at = ds~load_uint(32);
        storage::admin_count_for_active = ds~load_uint(16);

        slice arbitration_data = ds~load_ref().begin_parse();
        storage::admin_voted_count = arbitration_data~load_uint(64);
        storage::freelancer_part = arbitration_data~load_uint(8);
        storage::customer_part = arbitration_data~load_uint(8);
        storage::admin_count = arbitration_data~load_uint(64);
        storage::agreement_perc = arbitration_data~load_uint(64);
    } else {
        storage::init? = false;
    }

    ds.end_parse();
}

() save_data() impure {
    cell arbitration_data = begin_cell()
        .store_uint(storage::admin_voted_count, 64)
        .store_uint(storage::freelancer_part, 8)
        .store_uint(storage::customer_part, 8)
        .store_uint(storage::admin_count, 64)
        .store_uint(storage::agreement_perc, 64)
        .end_cell();
    cell addresses = begin_cell()
        .store_slice(storage::customer_address)
        .store_slice(storage::freelancer_address)
        .end_cell();

    set_data(begin_cell()
        .store_uint(storage::index, 64)
        .store_slice(storage::master_address)
        .store_ref(addresses)
        .store_dict(storage::content)
        .store_coins(storage::price)
        .store_uint(storage::deadline, 32)
        .store_uint(storage::time_for_check, 32)
        .store_uint(storage::protocol_fee_numerator, 8)
        .store_uint(storage::protocol_fee_denominator, 8)
        .store_dict(storage::responses)
        .store_uint(storage::status, 8)
        .store_uint(storage::admin_count, 64)
        .store_uint(storage::responses_count, 8)
        .store_ref(arbitration_data)
        .store_uint(storage::completed_at, 32)
        .store_uint(storage::admin_count_for_active, 16)
        .end_cell()
    );
}

(int) get_my_category() inline {
    (cell order_category, _) = storage::content.udict_get_ref?(256, hash::category);
    return order_category.begin_parse().preload_uint(256);
}

() validate_caterogy(int admin_category) impure inline_ref {
    if (admin_category != "all"H) {
        throw_unless(error::invalid_category, admin_category == get_my_category());
    }
}

() just_notify_master(int query_id, int op) impure inline {
    builder msg = begin_cell()
        .store_uint(flag::non_bounceable, 6)
        .store_slice(storage::master_address)
        .store_uint(0, 111)
        .store_uint(op::master_log, 32)
        .store_uint(op, 32)
        .store_uint(query_id, 64)
        .store_uint(storage::index, 64);

    send_raw_message(msg.end_cell(), 1);
}

() notify_master_completion(int query_id, int amount, int mode) impure inline {
    cell body = begin_cell()
        .store_uint(op::order_completed_notification, 32)
        .store_uint(query_id, 64)
        .store_uint(storage::index, 64)
        .store_uint(get_my_category(), 256)
        .end_cell();
    messages::send_simple_non_bounceable(storage::master_address, amount, null(), body, mode);
}

(int) get_payment() inline {
    return storage::price - (storage::price * storage::protocol_fee_numerator / storage::protocol_fee_denominator);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    ;; support bounce?

    load_data();
    if (~ storage::init?) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::master_address));
        int op = in_msg_body~load_uint(32);
        int query_id = in_msg_body~load_uint(64);
        throw_unless(0xFFFF, op == op::init_order);
        just_notify_master(query_id, op::init_order);
        storage::customer_address = in_msg_body~load_msg_addr();
        storage::freelancer_address = addr_none;
        storage::content = in_msg_body~load_dict();
        storage::price = in_msg_body~load_coins();
        storage::deadline = in_msg_body~load_uint(32);
        storage::time_for_check = in_msg_body~load_uint(32);
        storage::protocol_fee_numerator = in_msg_body~load_uint(8);
        storage::protocol_fee_denominator = in_msg_body~load_uint(8);
        storage::admin_count_for_active = in_msg_body~load_uint(16);
        storage::responses = null();
        storage::responses_count = 0;
        storage::status = status::moderation;
        storage::admin_count = 0;
        storage::agreement_perc = 0;
        storage::completed_at = 0;

        storage::admin_voted_count = 0;
        storage::freelancer_part = 0;
        storage::customer_part = 0;
        save_data();
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::activate_order) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::master_address));
        throw_unless(error::invalid_status, storage::status == status::moderation);
        int admin_category = in_msg_body~load_uint(256);
        validate_caterogy(admin_category);
        (_, int f) = storage::responses.dict_get?(267, sender_address);
        throw_unless(error::already_responded, f == false);
        storage::responses~dict_set(267, sender_address, begin_cell().end_cell().begin_parse());
        storage::admin_voted_count += 1;

        if (storage::admin_voted_count == storage::admin_count_for_active) {
            storage::status = status::active;
            storage::responses = null();
            storage::admin_voted_count = 0;

            cell body = begin_cell()
            .store_uint(op::order_activate_notification, 32)
            .store_uint(query_id, 64)
            .store_uint(storage::index, 64)
            .store_uint(get_my_category(), 256)
            .end_cell();
            messages::send_simple_non_bounceable(storage::master_address, 0, null(), body, 64);
            save_data();
        }
        return ();
    }

    if (op == op::add_response) {
        just_notify_master(query_id, op);
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::master_address));
        throw_unless(error::invalid_status, storage::status == status::active);
        throw_unless(error::too_many_responded, storage::responses_count < const::max_responses);
        slice user_address = in_msg_body~load_msg_addr();
        (_, int f) = storage::responses.dict_get?(267, user_address);
        throw_unless(error::already_responded, f == false);
        cell content = in_msg_body~load_ref();
        storage::responses~dict_set_ref(267, user_address, content);
        storage::responses_count += 1;
        save_data();
        return ();
    }

    if (op == op::assign_user) {
        just_notify_master(query_id, op);
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::customer_address));
        throw_unless(error::invalid_status, storage::status == status::active);
        storage::price = in_msg_body~load_coins();
        storage::deadline = in_msg_body~load_uint(32);
        storage::freelancer_address = in_msg_body~load_msg_addr();
        throw_unless(error::not_enough_ton, msg_value >= (storage::price + fee::assign_user));
        raw_reserve(storage::price, 4);
        in_msg_body.end_parse();
        (_, int f) = storage::responses.dict_get?(267, storage::freelancer_address);
        throw_unless(error::freelancer_not_found, f);
        storage::status = status::waiting_freelancer;
        messages::send_simple_non_bounceable(storage::customer_address, 0, null(), null(), 130);
        save_data();
        return ();
    }

    if (op == op::accept_order) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::freelancer_address));
        throw_unless(error::invalid_status, storage::status == status::waiting_freelancer);
        storage::status = status::in_progress;

        int protocol_fee = storage::price * storage::protocol_fee_numerator / storage::protocol_fee_denominator;
        cell body = begin_cell()
            .store_uint(op::order_fee, 32)
            .store_uint(query_id, 64)
            .store_uint(storage::index, 64)
            .end_cell();
        messages::send_simple_non_bounceable(storage::master_address, protocol_fee, null(), body, 1);
        storage::responses = null();
        storage::responses_count = 0;
        save_data();
        return ();
    }

    if (op == op::reject_order) {
        just_notify_master(query_id, op);
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::freelancer_address));
        throw_unless(error::invalid_status, storage::status == status::waiting_freelancer);
        messages::send_simple_non_bounceable(storage::customer_address, storage::price, null(), null(), 128);
        storage::status = status::active;
        save_data();
        return ();
    }

    if (op == op::cancel_assign) {
        just_notify_master(query_id, op);
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::customer_address));
        throw_unless(error::invalid_status, storage::status == status::waiting_freelancer);
        messages::send_simple_non_bounceable(storage::customer_address, storage::price, null(), null(), 128);
        storage::status = status::active;
        save_data();
        return ();
    }

    if (op == op::refund) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::customer_address));
        throw_unless(error::invalid_status, storage::status == status::in_progress);
        throw_unless(error::too_early, now() > storage::deadline);
        notify_master_completion(query_id, 100000000, 1); ;; 0.1 TON
        cell body = begin_cell()
            .store_uint(op::order_completed, 32)
            .store_uint(query_id, 64)
            .end_cell();
        messages::send_simple_non_bounceable(storage::customer_address, get_payment(), null(), body, 128);
        storage::status = status::refunded;
        save_data();
        return ();
    }

    if (op == op::complete_order) {
        just_notify_master(query_id, op);
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::freelancer_address));
        throw_unless(error::invalid_status, storage::status == status::in_progress);
        cell result = in_msg_body~load_ref();
        in_msg_body.end_parse();
        storage::status = status::fulfilled;
        storage::completed_at = now();
        (cell content, _) = storage::responses.dict_get_ref?(267, storage::freelancer_address);
        content~udict_set_ref(256, hash::result, result);
        storage::responses = storage::responses.dict_set_ref(267, storage::freelancer_address, content);
        save_data();
        return ();
    }

    if (op == op::force_payment) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::freelancer_address));
        throw_unless(error::invalid_status, storage::status == status::fulfilled);
        throw_unless(error::too_early, now() >= (storage::completed_at + storage::time_for_check));
        notify_master_completion(query_id, 100000000, 1); ;; 0.1 TON
        cell body = begin_cell()
            .store_uint(op::order_completed, 32)
            .store_uint(query_id, 64)
            .end_cell();
        messages::send_simple_non_bounceable(storage::freelancer_address, 0, null(), body, 128);
        storage::status = status::payment_forced;
        save_data();
        return ();
    }

    if (op == op::customer_feedback) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::customer_address));
        throw_unless(error::invalid_status, storage::status == status::fulfilled);
        int arbitration? = in_msg_body~load_int(1);
        if(arbitration?) {
            cell body = begin_cell()
                .store_uint(op::get_admins, 32)
                .store_uint(query_id, 64)
                .store_uint(storage::index, 64)
                .store_uint(get_my_category(), 256)
                .end_cell();
            messages::send_simple_non_bounceable(storage::master_address, 0, null(), body, 64);
            storage::status = status::pre_arbitration;
            save_data();
            return ();
        }

        cell body = begin_cell()
            .store_uint(op::order_completed, 32)
            .store_uint(query_id, 64)
            .end_cell();
        messages::send_simple_non_bounceable(storage::freelancer_address, get_payment(), null(), body, 1);
        notify_master_completion(query_id, 0, 64);
        storage::status = status::completed;
        save_data();
        return ();
    }

    if (op == op::set_admins) {
;;        just_notify_master(query_id, op); ;; not enough founds?
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::master_address));
        throw_unless(error::invalid_status, storage::status == status::pre_arbitration);
        storage::admin_count = in_msg_body~load_uint(64);
        storage::agreement_perc = in_msg_body~load_uint(64);
        storage::status = status::on_arbitration;
        save_data();
        return ();
    }

    if (op == op::process_arbitration) {
        just_notify_master(query_id, op);
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::master_address));
        throw_unless(error::invalid_status, storage::status == status::on_arbitration);
        int admin_category = in_msg_body~load_uint(256);
        validate_caterogy(admin_category);
        (_, int f) = storage::responses.dict_get?(267, sender_address);
        throw_unless(error::already_responded, f == false);
        storage::responses~dict_set(267, sender_address, begin_cell().end_cell().begin_parse());

        storage::freelancer_part += in_msg_body~load_uint(8);
        storage::customer_part += in_msg_body~load_uint(8);
        storage::admin_voted_count += 1;
        if((storage::admin_voted_count * const::scale_factor / storage::admin_count) >= storage::agreement_perc) {
            storage::responses = null();
            int payment = get_payment();
            int customer_part = payment * storage::customer_part / storage::admin_voted_count / 100;
            int freelancer_part = payment - customer_part;
            cell body = begin_cell()
                .store_uint(op::order_completed, 32)
                .store_uint(query_id, 64)
                .end_cell();

            messages::send_simple_non_bounceable(storage::customer_address, customer_part, null(), body, 1);
            messages::send_simple_non_bounceable(storage::freelancer_address, freelancer_part, null(), body, 1);

            body = begin_cell()
                .store_uint(op::order_completed_notification, 32)
                .store_uint(query_id, 64)
                .store_uint(storage::index, 64)
                .store_uint(get_my_category(), 256)
                .end_cell();
            messages::send_simple_non_bounceable(storage::master_address, 0, null(), body, 128);
            storage::status = status::arbitration_solved;
        }

        save_data();
        return ();
    }
}

() recv_external(slice in_msg) impure {
    load_data();
    throw_unless(error::invalid_status, (storage::status == status::moderation) | (storage::status == status::active) | (storage::status == status::waiting_freelancer));
    accept_message();
    storage::status = status::outdated;
    save_data();
    int query_id = in_msg~load_uint(64);
    cell body = begin_cell()
        .store_uint(op::order_completed_notification, 32)
        .store_uint(query_id, 64)
        .store_uint(storage::index, 64)
        .store_uint(get_my_category(), 256)
        .end_cell();
    messages::send_simple_non_bounceable(storage::master_address, 0, null(), body, 128);
}

(int, int, slice, int, int, int, slice, slice, cell) get_order_data() method_id {
    load_data();
    return (storage::init?, storage::index, storage::master_address,
        storage::status, storage::price, storage::deadline, storage::customer_address,
        storage::freelancer_address, storage::content);
}

(int, int, int, int, int) get_arbitration_data() method_id {
    load_data();
    return (storage::admin_voted_count, storage::freelancer_part, storage::customer_part,
        storage::admin_count, storage::agreement_perc);
}

(cell, int) get_responses() method_id {
    load_data();
    return (storage::responses, storage::responses_count);
}

cell get_result() method_id {
    load_data();
    (cell content, int f) = storage::responses.dict_get_ref?(267, storage::freelancer_address);
    ifnot (f) {
        return null();
    }
    (cell result, _) = content.udict_get_ref?(256, hash::result);
    return result;
}

(int) get_force_payment_availability() method_id {
    load_data();
    int available? = 0;
    if (storage::status == status::fulfilled) {
        if (now() > (storage::completed_at + storage::time_for_check)) {
            available? = -1;
        } else {
            available? = 0;
        }
    } else {
        available? = 0;
    }
    return available?;
}

(int) get_refund_availability() method_id {
    load_data();
    int available? = 0;
    if (storage::status == status::in_progress) {
        if (now() > storage::deadline) {
            available? = -1;
        } else {
            available? = 0;
        }
    } else {
        available? = 0;
    }
    return available?;
}