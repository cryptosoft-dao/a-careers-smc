#include "imports/stdlib.fc";
#include "constants/constants.fc";
#include "constants/errors.fc";
#include "constants/op-codes.fc";
#include "constants/fees.fc";
#include "logic/messages.fc";

global int storage::init?;
global int storage::index;
global slice storage::master_address;
global slice storage::admin_address;
global int storage::revoked_at;
global cell storage::content;

() load_data() impure {
    slice ds = get_data().begin_parse();

    storage::index = ds~load_uint(64);
    storage::master_address = ds~load_msg_addr();

    if(slice_bits(ds) > 0) {
        storage::init? = true;
        storage::admin_address = ds~load_msg_addr();
        storage::revoked_at = ds~load_uint(32);
        storage::content = ds~load_ref();
    } else {
        storage::init? = false;
        storage::admin_address = addr_none;
        storage::revoked_at = 0;
        storage::content = null();
    }
}

() save_data() impure {
    set_data(begin_cell()
        .store_uint(storage::index, 64)
        .store_slice(storage::master_address)
        .store_slice(storage::admin_address)
        .store_uint(storage::revoked_at, 32)
        .store_ref(storage::content)
        .end_cell()
    );
}

int get_category() inline {
    (cell category, _) = storage::content.udict_get_ref?(256, "category"H);
    return category.begin_parse().preload_uint(256);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    ;; support bounce?

    load_data();
    if (~ storage::init?) {
        throw_unless(error:unauthorized, equal_slices(sender_address, storage::master_address));
        storage::admin_address = in_msg_body~load_msg_addr();
        storage::content = in_msg_body~load_dict();
        storage::revoked_at = 0;
        save_data();
        return ();
    }


    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);


    ;; --------------- From Admin ---------------

    if(equal_slices(sender_address, storage::admin_address)) {
        throw_unless(error:unauthorized, storage::revoked_at == 0);

        if (op == op::activate_order_admin) {
            throw_unless(error::not_enough_ton, msg_value >= fee::order_activation);
            int order_index = in_msg_body~load_uint(64);
            cell body = begin_cell()
                .store_uint(op::activate_order_master, 32)
                .store_uint(query_id, 64)
                .store_uint(storage::index, 64)
                .store_uint(get_category(), 256)
                .store_uint(order_index, 64)
                .end_cell();

            messages::send_simple_bounceable(storage::master_address, 0, null(), body, 64);
            return ();
        }

        if (op == op::activate_user_admin) {
;;            throw_unless(error::not_enough_ton, msg_value >= fee::user_activation);
            (cell can_approve_user, _) = storage::content.udict_get_ref?(256, "can_approve_user"H);
            throw_unless(error:unauthorized, can_approve_user.begin_parse().preload_int(1));
            int user_index = in_msg_body~load_uint(64);
            in_msg_body.end_parse();
            cell body = begin_cell()
                .store_uint(op::activate_user_master, 32)
                .store_uint(query_id, 64)
                .store_uint(storage::index, 64)
                .store_uint(user_index, 64)
                .end_cell();
            messages::send_simple_bounceable(storage::master_address, 0, null(), body, 64);
            return ();
        }

        if (op == op::process_arbitration_admin) {
            throw_unless(error::not_enough_ton, msg_value >= fee::process_arbitration);
            int order_index = in_msg_body~load_uint(64);
            int customer_part = in_msg_body~load_uint(8);
            int freelancer_part = in_msg_body~load_uint(8);
            in_msg_body.end_parse();
            throw_unless(error::invalid_parts, (freelancer_part + customer_part) == 100);
            cell body = begin_cell()
                .store_uint(op::process_arbitration_master, 32)
                .store_uint(query_id, 64)
                .store_uint(storage::index, 64)
                .store_uint(get_category(), 256)
                .store_uint(order_index, 64)
                .store_uint(customer_part, 8)
                .store_uint(freelancer_part, 8)
                .end_cell();
            messages::send_simple_non_bounceable(storage::master_address, 0, null(), body, 64);
            return ();
        }

        if (op == op::create_admin) {
            throw_unless(error::not_enough_ton, msg_value >= fee::admin_creation);
            throw_unless(error:unauthorized, get_category() == "all"H);
            cell content = in_msg_body~load_dict();
            slice admin_address = in_msg_body~load_msg_addr();
            in_msg_body.end_parse();
            cell body = begin_cell()
                .store_uint(op::create_admin_master, 32)
                .store_uint(query_id, 64)
                .store_uint(storage::index, 64)
                .store_dict(content)
                .store_slice(admin_address)
                .end_cell();
            messages::send_simple_bounceable(storage::master_address, 0, null(), body, 64);
            return ();
        }

        if (op == op::revoke_user_admin) {
            (cell can_approve_user, _) = storage::content.udict_get_ref?(256, "can_revoke_user"H);
            throw_unless(error:unauthorized, can_approve_user.begin_parse().preload_int(1));
            int user_index = in_msg_body~load_uint(64);
            in_msg_body.end_parse();
            cell body = begin_cell()
                .store_uint(op::revoke_user_master, 32)
                .store_uint(query_id, 64)
                .store_uint(storage::index, 64)
                .store_uint(user_index, 64)
                .end_cell();
            messages::send_simple_bounceable(storage::master_address, 0, null(), body, 64);
            return ();
        }

        if (op == op::revoke_admin_admin) {
            throw_unless(error:unauthorized, get_category() == "all"H);
            int admin_index = in_msg_body~load_uint(64);
            in_msg_body.end_parse();
            cell body = begin_cell()
                .store_uint(op::revoke_admin_master, 32)
                .store_uint(query_id, 64)
                .store_uint(storage::index, 64)
                .store_uint(admin_index, 64)
                .end_cell();
            messages::send_simple_bounceable(storage::master_address, 0, null(), body, 64);
            return ();
        }

        ;; todo: can user edit content?

        throw(0xFFFF);
    }


    ;; --------------- From Master ---------------

    if(equal_slices(sender_address, storage::master_address)) {
        if (op == op::revoke_admin) {
            throw_unless(error::already_revoked, storage::revoked_at == 0);
            storage::revoked_at = now();
            cell body = begin_cell()
                .store_uint(op::admin_revoked_notification, 32)
                .store_uint(query_id, 64)
                .store_uint(storage::index, 64)
                .store_uint(get_category(), 256)
                .end_cell();
            messages::send_simple_non_bounceable(storage::master_address, 0, null(), body, 64);
            save_data();
            return ();
        }

        ;; TODO: Handle master messages

        throw(0xFFFF);
    }
}

(int, int, slice, slice, int, cell) get_admin_data() method_id {
    load_data();
    return (storage::init?, storage::index, storage::master_address, storage::admin_address, storage::revoked_at, storage::content);
}