global slice storage::root_address;

global cell storage::order_code;
global cell storage::user_code;
global cell storage::admin_code;

global int storage::order_next_index;
global int storage::user_next_index;
global int storage::admin_next_index;

global cell storage::categories;
global int storage::fee_numerator;
global int storage::fee_denominator;

global int category::active;
global int category::admin_count;
global int category::active_order_count;
global int category::hash;
global int category::agreement_perc;

global slice msg::sender_address;

#include "imports/stdlib.fc";
#include "constants/constants.fc";
#include "constants/op-codes.fc";
#include "constants/errors.fc";
#include "constants/fees.fc";
#include "logic/utils.fc";
#include "logic/messages.fc";
#include "logic/master-utils.fc";

{-
_ order_code:^Cell user_code:^Cell admin_code:^Cell = Codes;
_ order_next_index:uint64 user_next_index:uint64 admin_next_index:uint64 = Indexes;
_ admin_address:MsgAddressInt codes:^Codes indexes:^Indexes = MasterStorage;
-}

() load_data() impure {
    slice ds = get_data().begin_parse();

    storage::root_address = ds~load_msg_addr();

    slice codes = ds~load_ref().begin_parse();
    storage::order_code = codes~load_ref();
    storage::user_code = codes~load_ref();
    storage::admin_code = codes~load_ref();

    slice indexes = ds~load_ref().begin_parse();
    storage::order_next_index = indexes~load_uint(64);
    storage::user_next_index = indexes~load_uint(64);
    storage::admin_next_index = indexes~load_uint(64);

    storage::categories = ds~load_dict();
    storage::fee_numerator = ds~load_uint(8);
    storage::fee_denominator = ds~load_uint(8);
}

() save_data() impure {
    cell codes = begin_cell()
        .store_ref(storage::order_code)
        .store_ref(storage::user_code)
        .store_ref(storage::admin_code)
        .end_cell();

    cell indexes = begin_cell()
        .store_uint(storage::order_next_index, 64)
        .store_uint(storage::user_next_index, 64)
        .store_uint(storage::admin_next_index, 64)
        .end_cell();

    cell data = begin_cell()
        .store_slice(storage::root_address)
        .store_ref(codes)
        .store_ref(indexes)
        .store_dict(storage::categories)
        .store_uint(storage::fee_numerator, 8)
        .store_uint(storage::fee_denominator, 8)
        .end_cell();

    set_data(data);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_bits() < 32) {
        return();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    msg::sender_address = cs~load_msg_addr();
    ;; support bounce?

    load_data();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    ;; TODO: List of available categories? Validate category on order creation?

    if (op == op::create_category) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        category::hash = in_msg_body~load_uint(256);
        category::agreement_perc = in_msg_body~load_uint(64);
        in_msg_body.end_parse();

        (_, int f) = storage::categories.udict_get?(256, category::hash);
        throw_unless(error::category_already_exist, f == false);
        category::active = true;
        category::admin_count = 0;
        category::active_order_count = 0;
        save_category_data();
        save_data();
        return ();
    }

    ;; --------------- Interactions with admin ---------------
    if (op == op::create_admin) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        throw_unless(error::not_enough_ton, msg_value >= fee::admin_creation);
        cell content = in_msg_body~load_dict();
        slice admin_address = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();
        create_admin(content, admin_address, true);
        storage::admin_next_index += 1;
        save_data();
        return ();
    }

    if (op == op::create_admin_master) {
        int admin_index = in_msg_body~load_uint(64);
        throw_unless(error:unauthorized, equal_slices(msg::sender_address,
            calculate_contract_address(calculate_contract_state_init(admin_index, storage::admin_code))));
        throw_unless(error:unauthorized, in_msg_body~load_uint(256) == "all"H);
        cell content = in_msg_body~load_dict();
        slice admin_address = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();
        create_admin(content, admin_address, false);
        storage::admin_next_index += 1;
        save_data();
        return ();
    }

    if (op == op::revoke_admin_master) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        int admin_index = in_msg_body~load_uint(64);
        cell admin_state_init = calculate_contract_state_init(admin_index, storage::admin_code);
        slice admin_contract_address = calculate_contract_address(admin_state_init);

        ;; TODO: implement
        return ();
    }

    if (op == op::admin_revoked_notification) {
        int admin_index = in_msg_body~load_uint(64);
        throw_unless(error:unauthorized, equal_slices(msg::sender_address,
            calculate_contract_address(calculate_contract_state_init(admin_index, storage::admin_code))));
        int category_hash = in_msg_body~load_uint(64);
        load_category_data(category_hash);
        category::admin_count -= 1;
        save_category_data();
        save_data();
        return ();
    }

    if (op == op::create_user) {
        cell content = in_msg_body~load_dict();
        slice user_address = in_msg_body~load_msg_addr();
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, user_address));
        in_msg_body.end_parse();
        ;; TODO: Check for existing fields
        int user_index = storage::user_next_index;
        cell user_state_init = calculate_contract_state_init(user_index, storage::user_code);
        slice user_contract_address = calculate_contract_address(user_state_init);
        cell body = begin_cell()
            .store_slice(user_address)
            .store_dict(content)
            .end_cell();
        messages::send_simple_bounceable(user_contract_address, 0, user_state_init, body, 128);
        storage::user_next_index += 1;
        save_data();
        return ();
    }


    ;; --------------- Interactions with user ---------------
    if (op == op::create_order_master) {
        int user_index = in_msg_body~load_uint(64);
        throw_unless(error:unauthorized, equal_slices(msg::sender_address,
            calculate_contract_address(calculate_contract_state_init(user_index, storage::user_code))));

        throw_unless(error::not_enough_ton, msg_value >= (fee::order_creation + protocol_fee::order_creation));
        raw_reserve(protocol_fee::order_creation, 4);

        cell content = in_msg_body~load_dict();
        (cell admin_caterogy, int f) = content.udict_get_ref?(256, hash::category);
        throw_unless(error::invalid_content, f == true);
        int category_hash = admin_caterogy.begin_parse().preload_uint(256);
        load_category_data(category_hash);
        throw_unless(error::invalid_category, category::active == true);

        cell order_state_init = calculate_contract_state_init(storage::order_next_index, storage::order_code);
        slice order_address = calculate_contract_address(order_state_init);

        slice customer_address = in_msg_body~load_msg_addr();
        int price = in_msg_body~load_coins();
        int deadline = in_msg_body~load_uint(32);
        cell body = begin_cell()
            .store_slice(customer_address)
            .store_dict(content)
            .store_coins(price)
            .store_uint(deadline, 32)
            .store_uint(storage::fee_numerator, 8)
            .store_uint(storage::fee_denominator, 8)
            .end_cell();
        messages::send_simple_bounceable(order_address, 0, order_state_init, body, 128);
        storage::order_next_index += 1;
        save_data();
        return ();
    }

    if (op == op::revoke_user_master) {
        int user_index = in_msg_body~load_uint(64);
        throw_unless(error:unauthorized, equal_slices(msg::sender_address,
            calculate_contract_address(calculate_contract_state_init(user_index, storage::user_code))));
        cell user_state_init = calculate_contract_state_init(user_index, storage::user_code);
        slice user_contract_address = calculate_contract_address(user_state_init);

        ;; TODO: Implement

        return ();
    }

    if (op == op::activate_user_master) {
        int admin_index = in_msg_body~load_uint(64);
        throw_unless(error:unauthorized, equal_slices(msg::sender_address,
            calculate_contract_address(calculate_contract_state_init(admin_index, storage::admin_code))));
        in_msg_body~skip_bits(256);
        int user_index = in_msg_body~load_uint(64);
        slice user_contract_address = calculate_contract_address(calculate_contract_state_init(user_index, storage::user_code));
        cell body = begin_cell()
            .store_uint(op::activate_user, 32)
            .store_uint(query_id, 64)
            .end_cell();
        messages::send_simple_bounceable(user_contract_address, 0, null(), body, 64);
        return ();
    }


    ;; --------------- Interactions with order ---------------

    if (op == op::activate_order_master) {
        int admin_index = in_msg_body~load_uint(64);
        throw_unless(error:unauthorized, equal_slices(msg::sender_address,
                calculate_contract_address(calculate_contract_state_init(admin_index, storage::admin_code))));
        int category_hash = in_msg_body~load_uint(256);
        int order_index = in_msg_body~load_uint(64);
        slice order_address = calculate_contract_address(calculate_contract_state_init(order_index, storage::order_code));
        in_msg_body.end_parse();

        cell body = begin_cell()
            .store_uint(op::activate_order, 32)
            .store_uint(query_id, 64)
            .store_uint(category_hash, 256)
            .end_cell();
        messages::send_simple_bounceable(order_address, 0, null(), body, 64);
        return ();
    }

    if (op == op::order_activate_notification) {
        int order_index = in_msg_body~load_uint(64);
        throw_unless(error:unauthorized, equal_slices(msg::sender_address,
            calculate_contract_address(calculate_contract_state_init(order_index, storage::order_code))));
        int category_hash = in_msg_body~load_uint(256);
        load_category_data(category_hash);
        category::active_order_count += 1;
        save_category_data();
        save_data();
        return ();
    }

    if (op == op::add_response_master) {
        int user_index = in_msg_body~load_uint(64);
        throw_unless(error:unauthorized, equal_slices(msg::sender_address,
            calculate_contract_address(calculate_contract_state_init(user_index, storage::user_code))));
        int order_index = in_msg_body~load_uint(64);
        slice order_contract_address = calculate_contract_address(calculate_contract_state_init(order_index, storage::order_code));
        slice user_address = in_msg_body~load_msg_addr();
        cell body = begin_cell()
            .store_uint(op::add_response, 32)
            .store_uint(query_id, 64)
            .store_slice(user_address)
            .end_cell();

        messages::send_simple_bounceable(order_contract_address, 0, null(), body, 64);
        return ();
    }

    if (op == op::process_arbitration_master) {
        int admin_index = in_msg_body~load_uint(64);
        throw_unless(error:unauthorized, equal_slices(msg::sender_address,
            calculate_contract_address(calculate_contract_state_init(admin_index, storage::admin_code))));
        int admin_category_hash = in_msg_body~load_uint(256);
        int freelancer_part = in_msg_body~load_uint(8);
        int customer_part = in_msg_body~load_uint(8);
        int order_index = in_msg_body~load_uint(64);
        slice order_contract_address = calculate_contract_address(calculate_contract_state_init(order_index, storage::order_code));
        in_msg_body.end_parse();

        cell body = begin_cell()
            .store_uint(op::process_arbitration, 32)
            .store_uint(query_id, 64)
            .store_uint(admin_category_hash, 256)
            .store_uint(freelancer_part, 8)
            .store_uint(customer_part, 8)
            .end_cell();
        messages::send_simple_bounceable(order_contract_address, 0, null(), body, 64);
        return ();
    }

    if (op == op::get_admins) {
        int order_index = in_msg_body~load_uint(64);
        throw_unless(error:unauthorized, equal_slices(msg::sender_address,
            calculate_contract_address(calculate_contract_state_init(order_index, storage::order_code))));
        int category_hash = in_msg_body~load_uint(64);
        load_category_data(category_hash);
        cell body = begin_cell()
            .store_uint(op::set_admins, 32)
            .store_uint(query_id, 64)
            .store_uint(category::admin_count, 64)
            .store_uint(category::agreement_perc, 64)
            .end_cell();

        messages::send_simple_bounceable(msg::sender_address, 0, null(), body, 64);
        return ();
    }

    if (op == op::process_arbitration_master) {
        int admin_index = in_msg_body~load_uint(64);
        throw_unless(error:unauthorized, equal_slices(msg::sender_address,
            calculate_contract_address(calculate_contract_state_init(admin_index, storage::admin_code))));
        int order_index = in_msg_body~load_uint(64);
        int freelancer_part = in_msg_body~load_uint(8);
        int customer_part = in_msg_body~load_uint(8);


        slice order_address = calculate_contract_address(calculate_contract_state_init(order_index, storage::order_code));
        ;; TODO: Implement

        return ();
    }

    if (op == op::order_completed_notification) {
        int order_index = in_msg_body~load_uint(64);
        throw_unless(error:unauthorized, equal_slices(msg::sender_address,
            calculate_contract_address(calculate_contract_state_init(order_index, storage::order_code))));
        int category_hash = in_msg_body~load_uint(64);
        load_category_data(category_hash);
        category::active_order_count -= 1;
        save_category_data();
        save_data();
        return ();
    }

    if (op::order_fee) {
        int order_index = in_msg_body~load_uint(64);
        throw_unless(error:unauthorized, equal_slices(msg::sender_address,
            calculate_contract_address(calculate_contract_state_init(order_index, storage::order_code))));
        return ();
    }

    throw(0xFFFF);
}


(int, int, int) get_indexes() method_id {
    load_data();
    return (storage::order_next_index, storage::user_next_index, storage::admin_next_index);
}

(cell, cell, cell) get_codes() method_id {
    load_data();
    return (storage::order_code, storage::user_code, storage::admin_code);
}

(int, int, int, int) get_category_data(int category_hash) method_id {
    load_data();
    load_category_data(category_hash);
    return (category::active, category::admin_count, category::active_order_count, category::agreement_perc);
}

(slice, cell, int, int) get_master_data() method_id {
    load_data();
    return (storage::root_address, storage::categories, storage::fee_numerator, storage::fee_denominator);
}