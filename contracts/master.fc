global slice storage::root_address;
global slice storage::81_address;

global cell storage::order_code;
global cell storage::user_code;
global cell storage::admin_code;

global int storage::order_next_index;
global int storage::user_next_index;
global int storage::admin_next_index;

global cell storage::categories;
global int storage::order_fee_numerator;
global int storage::order_fee_denominator;
global int storage::user_creation_fee;
global int storage::order_creation_fee;

global cell storage::languages;

global int category::active;
global int category::admin_count;
global int category::active_order_count;
global int category::hash;
global int category::agreement_perc;
global int category::admin_count_for_activate;
global cell category::name;

global slice msg::sender_address;
global int msg::op;
global int msg::query_id;


#include "imports/stdlib.fc";
#include "constants/constants.fc";
#include "constants/op-codes.fc";
#include "constants/errors.fc";
#include "constants/fees.fc";
#include "logic/utils.fc";
#include "logic/messages.fc";

{-
_ order_code:^Cell user_code:^Cell admin_code:^Cell = Codes;
_ order_next_index:uint64 user_next_index:uint64 admin_next_index:uint64 = Indexes;
_ admin_address:MsgAddressInt codes:^Codes indexes:^Indexes = MasterStorage;
-}

() load_data() impure {
    slice ds = get_data().begin_parse();

    storage::root_address = ds~load_msg_addr();
    storage::81_address = ds~load_msg_addr();

    slice codes = ds~load_ref().begin_parse();
    storage::order_code = codes~load_ref();
    storage::user_code = codes~load_ref();
    storage::admin_code = codes~load_ref();

    slice indexes = ds~load_ref().begin_parse();
    storage::order_next_index = indexes~load_uint(64);
    storage::user_next_index = indexes~load_uint(64);
    storage::admin_next_index = indexes~load_uint(64);

    storage::categories = ds~load_dict();
    storage::order_fee_numerator = ds~load_uint(8);
    storage::order_fee_denominator = ds~load_uint(8);
    storage::user_creation_fee = ds~load_coins();
    storage::order_creation_fee = ds~load_coins();

    storage::languages = ds~load_dict();
}

() save_data() impure {
    cell codes = begin_cell()
        .store_ref(storage::order_code)
        .store_ref(storage::user_code)
        .store_ref(storage::admin_code)
        .end_cell();

    cell indexes = begin_cell()
        .store_uint(storage::order_next_index, 64)
        .store_uint(storage::user_next_index, 64)
        .store_uint(storage::admin_next_index, 64)
        .end_cell();

    cell data = begin_cell()
        .store_slice(storage::root_address)
        .store_slice(storage::81_address)
        .store_ref(codes)
        .store_ref(indexes)
        .store_dict(storage::categories)
        .store_uint(storage::order_fee_numerator, 8)
        .store_uint(storage::order_fee_denominator, 8)
        .store_coins(storage::user_creation_fee)
        .store_coins(storage::order_creation_fee)
        .store_dict(storage::languages)
        .end_cell();

    set_data(data);
}

#include "logic/master-utils.fc";
#include "logic/master-calls.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_bits() < 32) {
        return();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    msg::sender_address = cs~load_msg_addr();
    ;; support bounce?

    load_data();
    msg::op = in_msg_body~load_uint(32);
    msg::query_id = in_msg_body~load_uint(64);

    ;; --------------- Interactions with root ---------------

    if (msg::op == op::create_category) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        category::hash = in_msg_body~load_uint(256);
        category::agreement_perc = in_msg_body~load_uint(64);
        category::admin_count_for_activate = in_msg_body~load_uint(16);
        category::name = in_msg_body~load_ref();
        in_msg_body.end_parse();

        ;; ----- start check sha256(name) -----
;;        slice ns = category::name.begin_parse();
;;        throw_unless(666, check_snake_hash(category::hash, ns));
        ;; ----- end check sha256(name) -----

        (_, int f) = storage::categories.udict_get?(256, category::hash);
        throw_unless(error::category_already_exist, f == false);
        category::active = true;
        category::admin_count = 0;
        category::active_order_count = 0;
        save_category_data();
        save_data();
        return ();
    }

    if (msg::op == op::create_language) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        int lang::hash = in_msg_body~load_uint(256);
        cell lang::name = in_msg_body~load_ref();
        in_msg_body.end_parse();

        ;; ----- start check sha256(name) -----
;;        slice ns = lang::name.begin_parse();
;;        throw_unless(666, check_snake_hash(lang::hash, ns));
        ;; ----- end check sha256(name) -----

        (storage::languages, int f) = storage::languages.udict_add_ref?(256, lang::hash, lang::name);
        throw_unless(error::language_already_exist, f);
        save_data();
        return ();
    }

    if (msg::op == op::create_admin) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        throw_unless(error::not_enough_ton, msg_value >= fee::admin_creation);
        raw_reserve(0, 4);
        cell content = in_msg_body~load_dict();
        slice admin_address = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();
        create_admin(content, admin_address, true);
        storage::admin_next_index += 1;
        save_data();
        messages::send_simple_bounceable(msg::sender_address, 0, null(), null(), 128);
        return ();
    }

    if (msg::op == op::create_user) {
        cell content = in_msg_body~load_dict();
        in_msg_body.end_parse();
        throw_unless(error::not_enough_ton, msg_value >= (storage::user_creation_fee + fee::user_creation));
        raw_reserve(storage::user_creation_fee, 4);
        int user_index = storage::user_next_index;
        cell user_state_init = calculate_contract_state_init(user_index, storage::user_code);
        slice user_contract_address = calculate_contract_address(user_state_init);
        cell body = begin_cell()
        .store_slice(msg::sender_address)
        .store_dict(content)
        .end_cell();
        messages::send_simple_bounceable(user_contract_address, 0, user_state_init, body, 128);
        storage::user_next_index += 1;
        save_data();
        return ();
    }

    if (msg::op == op::revoke_admin_master_root) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        int admin_index = in_msg_body~load_uint(64);
        cell admin_state_init = calculate_contract_state_init(admin_index, storage::admin_code);
        slice admin_contract_address = calculate_contract_address(admin_state_init);
        in_msg_body.end_parse();
        cell body = begin_cell()
            .store_uint(op::revoke_admin, 32)
            .store_uint(msg::query_id, 64)
            .end_cell();
        messages::send_simple_bounceable(admin_contract_address, 0, admin_state_init, body, 64);
        return ();
    }

    if (msg::op == op::change_fees) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        storage::order_fee_numerator = in_msg_body~load_uint(8);
        storage::order_fee_denominator = in_msg_body~load_uint(8);
        storage::user_creation_fee = in_msg_body~load_coins();
        storage::order_creation_fee = in_msg_body~load_coins();
        in_msg_body.end_parse();
        save_data();
        return ();
    }

    if (msg::op == op::change_category_percent) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        int category_hash = in_msg_body~load_uint(256);
        int agreement_perc = in_msg_body~load_uint(64);
        in_msg_body.end_parse();
        load_category_data(category_hash);
        category::agreement_perc = agreement_perc;
        save_category_data();
        save_data();
        return ();
    }

    if (msg::op == op::change_category_count_for_activate) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        int category_hash = in_msg_body~load_uint(256);
        int admin_count_for_activate = in_msg_body~load_uint(16);
        in_msg_body.end_parse();
        load_category_data(category_hash);
        category::admin_count_for_activate = admin_count_for_activate;
        save_category_data();
        save_data();
        return ();
    }

    if (msg::op == op::deactivate_category) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        int category_hash = in_msg_body~load_uint(256);
        in_msg_body.end_parse();
        load_category_data(category_hash);
        throw_unless(error::category_already_inactive, category::active == true);
        category::active = false;
        save_category_data();
        save_data();
        return ();
    }

    if (msg::op == op::activate_category) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        int category_hash = in_msg_body~load_uint(256);
        in_msg_body.end_parse();
        load_category_data(category_hash);
        throw_unless(error::category_already_active, category::active == false);
        category::active = true;
        save_category_data();
        save_data();
        return ();
    }

    if (msg::op == op::delete_category) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        int category_hash = in_msg_body~load_uint(256);
        in_msg_body.end_parse();
        load_category_data(category_hash);
        throw_unless(error::deletion_not_allowed, category::active_order_count == 0);
        throw_unless(error::deletion_not_allowed, category::admin_count == 0);
        storage::categories~udict_delete?(256, category_hash);
        save_data();
        return ();
    }

    if (msg::op == op::delete_language) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        int lang::hash = in_msg_body~load_uint(256);
        in_msg_body.end_parse();
        storage::languages~udict_delete?(256, lang::hash);
        save_data();
        return ();
    }

    if (msg::op == op::withdraw_funds) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::root_address));
        raw_reserve(100000000, 0); ;; 0.1 TON
        messages::send_simple_non_bounceable(storage::root_address, 0, null(), null(), 128);
        commit();
        throw(0);
    }

    if (msg::op == 81) {
        throw_unless(error:unauthorized, equal_slices(msg::sender_address, storage::81_address));
        throw_unless(error::not_enough_ton, msg_value >= (81000000000 + 100000000)); ;; 81 TON + 0.1 TON
        raw_reserve(81000000000, 4);
        messages::send_simple_non_bounceable(msg::sender_address, 0, null(), null(), 128);
        commit();
        throw(81);
    }

    ;; --------------- Master, User, Order ---------------

    int contract_index = in_msg_body~load_uint(64);
    if (equal_slices(msg::sender_address,calculate_contract_address(calculate_contract_state_init(contract_index, storage::admin_code)))) {
        handle::admin_call(in_msg_body);
        return ();
    }
    elseif (equal_slices(msg::sender_address,calculate_contract_address(calculate_contract_state_init(contract_index, storage::user_code)))) {
        handle::user_call(in_msg_body, msg_value);
        return ();
    }
    elseif (equal_slices(msg::sender_address,calculate_contract_address(calculate_contract_state_init(contract_index, storage::order_code)))) {
        handle::order_call(in_msg_body);
        return ();
    }


    throw(0xFFFF);
}


(int, int, int) get_indexes() method_id {
    load_data();
    return (storage::order_next_index, storage::user_next_index, storage::admin_next_index);
}

(cell, cell, cell) get_codes() method_id {
    load_data();
    return (storage::order_code, storage::user_code, storage::admin_code);
}

(cell, int, int, int, int, int) get_category_data(int category_hash) method_id {
    load_data();
    load_category_data(category_hash);
    return (category::name, category::active, category::admin_count, category::active_order_count, category::agreement_perc, category::admin_count_for_activate);
}

cell get_language_data(int lang_hash) method_id {
    load_data();
    (cell lang::data, _) = storage::languages.udict_get_ref?(256, lang_hash);
    return lang::data;
}

(slice, cell, int, int, int, int) get_master_data() method_id {
    load_data();
    return (storage::root_address, storage::categories, storage::order_fee_numerator, storage::order_fee_denominator, storage::user_creation_fee, storage::order_creation_fee);
}

(slice) get_order_address(int order_index) method_id {
    load_data();
    return calculate_contract_address(calculate_contract_state_init(order_index, storage::order_code));
}

(slice) get_user_address(int user_index) method_id {
    load_data();
    return calculate_contract_address(calculate_contract_state_init(user_index, storage::user_code));
}

(slice) get_admin_address(int admin_index) method_id {
    load_data();
    return calculate_contract_address(calculate_contract_state_init(admin_index, storage::admin_code));
}
